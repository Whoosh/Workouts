package project_euler.roblems_1_100.problem_2;

import project_euler.sub_code.TakeWhile;

import java.math.BigInteger;
import java.util.function.BinaryOperator;
import java.util.function.Predicate;
import java.util.stream.Stream;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 * https://projecteuler.net/problem=2
 */

public class Fibonacci {

    private final static BigInteger LIMIT = new BigInteger("4000000");

    private final static Predicate<BigInteger> anyEven = value -> !value.testBit(0);
    private final static BinaryOperator<BigInteger> sum = (x, y) -> x.add(y);
    private final static Predicate<BigInteger> stopPredicate = x -> x.compareTo(LIMIT) < 0;

    public static void main(String[] args) {
        System.out.println(TakeWhile.takeWhileOrdered(fibStream(), stopPredicate).filter(anyEven).reduce(BigInteger.ZERO, sum));
    }

    public static Stream<BigInteger> fibStream() {
        return Stream.iterate(new BigInteger[]{BigInteger.ZERO, BigInteger.ONE}, from -> new BigInteger[]{from[1], from[0].add(from[1])}).map(from -> from[1]);
    }
}
